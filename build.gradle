plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'java'
    id 'maven-publish'
}

def ENV = System.getenv()
version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "slurryapi" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runConfigs.configureEach {
        ideConfigGenerated = false
    }
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modRuntimeOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create(MavenPublication) {
            groupId project.group
            artifactId project.base.archivesName.get()
            version project.version

            from components.java
        }
    }

    repositories {
        if(ENV.MAVEN_URL) {
            maven {
                url = ENV.MAVEN_URL
                credentials {
                    username = ENV.MAVEN_USERNAME
                    password = ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

tasks.register('checkVersion') {
    doFirst {
        def url = ENV.MAVEN_URL + "/" + project.group.replace(".", "/") + "/" + project.base.archivesName.get() + "/maven-metadata.xml"
        println("Checking $url")
        def xml = new URI(url).toURL().text
        def metadata = new groovy.xml.XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text()
        if (versions.contains(project.version)) {
            throw new GradleException("Version ${project.version} already exists!")
        }
    }
}

tasks.publish.mustRunAfter checkVersion